if run_button and producer_ids_input.strip():
    producer_ids = [pid.strip() for pid in producer_ids_input.splitlines() if pid.strip()]

    # Redirect print output
    original_stdout = sys.stdout
    sys.stdout = logger

    xml_outputs = {}  # store output file paths

    # Create a progress bar and status text in left column
    with col1:
        progress_bar = st.progress(0)
        status_text = st.empty()

    try:
        for i, pid in enumerate(producer_ids, start=1):
            status_text.text(f"Processing {pid} ({i}/{len(producer_ids)})...")
            print(f"â–¶ Starting processing for producer ID: {pid}")

            file_path = process_producer(pid)   # returns XML file path
            xml_outputs[pid] = file_path

            print(f"âœ… Finished processing for producer ID: {pid}\n")
            progress_bar.progress(i / len(producer_ids))  # update progress bar
            time.sleep(0.5)
    finally:
        sys.stdout = original_stdout

    # ---- Downloads area in left column ----
    with col1:
        st.subheader("ðŸ“¥ Downloads")
        # individual download buttons
        for pid, file_path in xml_outputs.items():
            with open(file_path, "rb") as f:
                st.download_button(
                    label=f"ðŸ“¥ {pid}.xml",
                    data=f.read(),
                    file_name=f"{pid}.xml",
                    mime="application/xml",
                    key=f"dl-{pid}"
                )

        # zip download button
        if xml_outputs:
            zip_buffer = sysio.BytesIO()
            with zipfile.ZipFile(zip_buffer, "w") as zipf:
                for pid, file_path in xml_outputs.items():
                    zipf.write(file_path, arcname=f"{pid}.xml")
            zip_buffer.seek(0)

            st.download_button(
                label="ðŸ“¦ Download All as ZIP",
                data=zip_buffer,
                file_name="all_producers_xml.zip",
                mime="application/zip",
                key="dl-all"
            )
