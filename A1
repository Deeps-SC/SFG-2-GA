import xml.etree.ElementTree as ET
import copy

# Define namespace constants
STERLING_SCHEDULE_NS = 'http://www.sterlingcommerce.com/documentation/SI/Schedule'
STERLING_DATAXML_NS = 'http://www.sterlingcommerce.com/documentation/DataXML'

NS = {
    'ns': STERLING_SCHEDULE_NS
}

def strip_namespace(elem):
    for el in elem.iter():
        if '}' in el.tag:
            el.tag = el.tag.split('}', 1)[1]
        el.attrib = {
            (k.split('}', 1)[-1] if '}' in k else k): v for k, v in el.attrib.items()
        }

def extract_producer_mailbox(schedule_elem):
    sched_params_elem = schedule_elem.find('ns:SCHEDULE_PARAMS', NS)
    if sched_params_elem is None or sched_params_elem.text is None:
        return None

    try:
        cdata_str = sched_params_elem.text.strip()
        start = cdata_str.find("?>") + 2
        inner_xml = cdata_str[start:].strip()

        cdata_root = ET.fromstring(inner_xml)
        for param in cdata_root.findall(f'.//{{{STERLING_DATAXML_NS}}}Parameter'):
            name = param.find(f'{{{STERLING_DATAXML_NS}}}name')
            value = param.find(f'{{{STERLING_DATAXML_NS}}}value')
            if name is not None and name.text.strip().lower() == 'producermailbox':
                return value.text.strip()
    except Exception:
        return None

def inject_schedule_for_producer(producer_xml_str, schedules_xml_str):
    producer_root = ET.fromstring(producer_xml_str)
    schedules_root = ET.fromstring(schedules_xml_str)

    scux_id_elem = producer_root.find('.//scux_user_id')
    if scux_id_elem is None or not scux_id_elem.text:
        print("❌ No scux_user_id found in producer XML.")
        return producer_xml_str

    scux_id = scux_id_elem.text.strip()
    if not scux_id.startswith('/'):
        scux_id = '/' + scux_id

    matched_schedule = None
    for schedule in schedules_root.findall('.//ns:SCHEDULE', NS):
        mailbox = extract_producer_mailbox(schedule)
        if mailbox and mailbox.strip().lower() == scux_id.lower():
            matched_schedule = schedule
            break

    if matched_schedule is None:
        print(f"⚠️ No matching schedule found for SCUX ID: {scux_id}")
        return producer_xml_str

    schedule_copy = copy.deepcopy(matched_schedule)
    strip_namespace(schedule_copy)

    consumer_elem = producer_root.find('.//consumer')
    if consumer_elem is None:
        print("❌ No <consumer> tag found in producer XML.")
        return producer_xml_str

    consumer_elem.append(schedule_copy)

    return ET.tostring(producer_root, encoding='unicode')
