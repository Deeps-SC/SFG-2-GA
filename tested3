import xml.etree.ElementTree as ET
from copy import deepcopy
import re

# Extract namespace from root tag
def get_namespace(element):
    m = re.match(r'\{.*\}', element.tag)
    return m.group(0) if m else ''

def extract_producermailbox_from_schedule(schedule_elem):
    sched_params = schedule_elem.find(f'{NS}SCHEDULE_PARAMS')
    if sched_params is not None and sched_params.text:
        try:
            cdata_text = sched_params.text.strip()
            if cdata_text.startswith('<?xml'):
                cdata_text = cdata_text[cdata_text.find('?>') + 2:].strip()
            cdata_root = ET.fromstring(cdata_text)

            for param in cdata_root.findall(".//{*}Parameter"):
                name = param.find("{*}name")
                value = param.find("{*}value")
                if name is not None and value is not None:
                    if name.text.strip().lower() == "producermailbox":
                        return value.text.strip()
        except ET.ParseError as e:
            print(f"⚠️ CDATA parse error: {e}")
    return None

def inject_schedule_for_producer(producer_xml_str, schedules_xml_str):
    global NS
    producer_root = ET.fromstring(producer_xml_str)
    schedules_root = ET.fromstring(schedules_xml_str)

    NS = get_namespace(schedules_root)  # e.g., '{http://sterlingcommerce.com/si/resources}'

    scux_elem = producer_root.find('.//scux_user_id')
    if scux_elem is None or not scux_elem.text:
        print("❌ No scux_user_id found in producer XML.")
        return ET.tostring(producer_root, encoding='unicode')

    scux_id = scux_elem.text.strip().upper()

    matched_schedule = None
    for schedule in schedules_root.findall(f".//{NS}SCHEDULE"):
        mailbox = extract_producermailbox_from_schedule(schedule)
        print(f"Checking mailbox: {repr(mailbox)} vs SCUX ID: {repr(scux_id)}")  # Debug
        if mailbox and mailbox.strip('/').upper() == scux_id:
            matched_schedule = schedule
            break

    if matched_schedule is not None:
        print(f"✅ Match found. Injecting schedule for SCUX ID: {scux_id}")
        producer_elem = producer_root.find('.//producer')
        if producer_elem is not None:
            producer_elem.append(deepcopy(matched_schedule))
    else:
        print(f"❌ No matching schedule found for SCUX ID: {scux_id}")

    return ET.tostring(producer_root, encoding='unicode')
