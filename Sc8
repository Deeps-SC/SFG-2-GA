import xml.etree.ElementTree as ET
import re

SI_NS = {'si': 'http://www.stercomm.com/SI/SI IE Resources'}

def extract_producer_id(producer_xml_string: str) -> str:
    root = ET.fromstring(producer_xml_string)
    user_id_el = root.find('.//scux_USER_ID')
    return user_id_el.text.strip() if user_id_el is not None else None

def extract_matching_schedule_block(schedules_xml_string: str, producer_id: str) -> str:
    schedules_root = ET.fromstring(schedules_xml_string)
    for sched in schedules_root.findall('.//si:SCHEDULE', namespaces=SI_NS):
        params_elem = sched.find('si:SCHEDULE_PARAMS', namespaces=SI_NS)
        if params_elem is not None and params_elem.text:
            cdata_content = params_elem.text.strip()
            match = re.search(r'<Name>\s*ProducerMailbox\s*</Name>\s*<Value>\s*(.*?)\s*</Value>', cdata_content)
            if match and match.group(1) == producer_id:
                schedule_xml = ET.tostring(sched, encoding='unicode')
                return clean_schedule_block(schedule_xml)
    return None

def clean_schedule_block(schedule_block: str) -> str:
    schedule_block = re.sub(r'<\?xml.*?\?>', '', schedule_block).strip()
    schedule_block = re.sub(
        r'<SCHEDULE_TIMINGXML>(.*?)</SCHEDULE_TIMINGXML>',
        lambda m: f"<SCHEDULE_TIMINGXML><![CDATA[{html_unescape(m.group(1).strip())}]]></SCHEDULE_TIMINGXML>",
        schedule_block,
        flags=re.DOTALL
    )
    return schedule_block

def html_unescape(text):
    return (text
            .replace("&lt;", "<")
            .replace("&gt;", ">")
            .replace("&amp;", "&")
            .replace("&quot;", '"')
            .replace("&apos;", "'"))

def inject_schedule_for_producer(producer_xml_string: str, schedules_xml_string: str) -> str:
    producer_id = extract_producer_id(producer_xml_string)
    if not producer_id:
        raise ValueError("Producer ID (scux_USER_ID) not found in producer XML.")

    schedule_block = extract_matching_schedule_block(schedules_xml_string, producer_id)
    if not schedule_block:
        raise ValueError(f"No matching schedule found for ProducerMailbox: {producer_id}")

    # Inject just before </Producer>
    injection_point = producer_xml_string.find('</Producer>')
    if injection_point == -1:
        raise ValueError("Could not find </Producer> tag in producer XML.")

    updated_xml = (
        producer_xml_string[:injection_point] +
        '\n' + schedule_block + '\n' +
        producer_xml_string[injection_point:]
    )

    return updated_xml
