import xml.etree.ElementTree as ET
import re
from xml.dom import minidom

SI_NS = "http://www.stercomm.com/SI/SI IE Resources"
NSMAP = {'si': SI_NS}

def extract_producer_id(producer_xml_string):
    try:
        root = ET.fromstring(producer_xml_string)
        user_id_elem = root.find(".//scux_USER_ID")
        return user_id_elem.text.strip() if user_id_elem is not None else None
    except ET.ParseError:
        return None

def inject_schedule_for_producer(producer_xml_string, schedules_xml_string):
    producer_id = extract_producer_id(producer_xml_string)
    if not producer_id:
        raise ValueError("scux_USER_ID not found in producer XML")

    # Parse schedules
    schedules_root = ET.fromstring(schedules_xml_string)
    schedule_tags = schedules_root.findall(".//si:SCHEDULE", namespaces=NSMAP)

    matched_schedule_raw = None
    for schedule_tag in schedule_tags:
        sched_params_elem = schedule_tag.find("si:SCHEDULE_PARAMS", namespaces=NSMAP)
        if sched_params_elem is not None and sched_params_elem.text:
            match = re.search(r"<Name>\s*ProducerMailbox\s*</Name>\s*<Value>\s*(.*?)\s*</Value>", sched_params_elem.text)
            if match:
                mailbox_full = match.group(1).strip()
                mailbox_id = mailbox_full.strip("/").split("/")[0]
                if mailbox_id == producer_id:
                    # Convert Element to string
                    matched_schedule_raw = ET.tostring(schedule_tag, encoding="unicode")
                    break

    if not matched_schedule_raw:
        raise ValueError(f"No matching schedule found for ProducerMailbox {producer_id}")

    # Inject matched_schedule_raw into producer XML string after <Consumers>
    insert_after = "</Consumers>"
    insert_index = producer_xml_string.find(insert_after)
    if insert_index == -1:
        raise ValueError("Could not find </Consumers> tag in producer XML")

    injected_xml = (
        producer_xml_string[:insert_index + len(insert_after)] +
        "\n" + matched_schedule_raw +
        producer_xml_string[insert_index + len(insert_after):]
    )

    # Pretty print
    parsed = minidom.parseString(injected_xml)
    return parsed.toprettyxml(indent="  ")
