import xmltodict

def extract_producer_mailbox(schedule_params: str) -> str:
    """Extracts the raw ProducerMailbox value from the CDATA-wrapped SCHEDULE_PARAMS XML."""
    try:
        parsed = xmltodict.parse(schedule_params)
        parameters = parsed.get("DataXML", {}).get("Parameter", [])
        if not isinstance(parameters, list):
            parameters = [parameters]
        for param in parameters:
            if param.get("Name") == "ProducerMailbox":
                return param.get("Value", "").strip()
    except Exception as e:
        print("Failed to parse schedule_params:", e)
    return ""

def extract_producer_id_from_mailbox(mailbox: str) -> str:
    """Extracts the producer ID (e.g. P123456) from the beginning of mailbox path like '/P123456/Inbox'."""
    if not mailbox:
        return ""
    mailbox = mailbox.strip("/")  # remove leading/trailing slashes
    return mailbox.split("/")[0]  # get first segment

def get_schedules(prod_id: str, schedules_dict: dict) -> list:
    """Returns all SCHEDULE dicts that match the given producer ID."""
    matched_schedules = []

    schedules = schedules_dict.get("SI_RESOURCES", {}).get("SCHEDULES", {}).get("SCHEDULE", [])
    if not isinstance(schedules, list):
        schedules = [schedules]

    for sched in schedules:
        raw_params = sched.get("SCHEDULE_PARAMS", "")
        mailbox = extract_producer_mailbox(raw_params)
        mailbox_id = extract_producer_id_from_mailbox(mailbox)
        if mailbox_id == prod_id:
            matched_schedules.append(sched)

    return matched_schedules
